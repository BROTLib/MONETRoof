<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="FB_RoofMotor" Id="{47cefcf1-8ba0-4c06-bdcd-b7d169ce9c61}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_RoofMotor
VAR_INPUT
	roof_number				: UINT;		// number of roof
	drive_number			: UINT;		// number of drive
	min_speed				: UINT;		// minimum speed to drive
	max_speed				: UINT;		// maximum speed to drive
	acceleration			: UINT;		// acceleration [speed/call]
	min_position			: INT;		// minimum position of roof
	max_position			: INT;		// maximum position of roof
	limit_slowdown			: REAL := 5;	// linear slowdown when moving towards limits starting at <x% and >(100-x)%
	roof_limit_open			: BOOL;		// whether any open limit switch for this roof is triggered
	roof_limit_closed		: BOOL;		// whether any close limit switch for this roof is triggered
	slow_open				: BOOL := FALSE;	// open at min_speed, ignoring all errors and other commands, only call from FB_Roof!
	slow_close				: BOOL := FALSE;	// close at min_speed, ignoring all errors and other commands, only call from FB_Roof!
	zero_counter			: BOOL := FALSE;	// reset position counter to zero
	comm					: I_Comm;
END_VAR
VAR_OUTPUT PERSISTENT
	position				: INT;	// position
END_VAR
VAR_OUTPUT
	percent_open			: REAL;	// percentage open
	
	// moving
	moving					: BOOL;
	
	// real speed
	real_speed				: INT;	
	
	// error 
	motor_error		AT%I*	: BOOL;
	error					: BOOL;
	
	// signals from limit switches
	opened			AT%I*	: BOOL;
	closed			AT%I*	: BOOL;
END_VAR
VAR
	// triggers for opened/closed
	opened_trigger			: R_TRIG;
	closed_trigger			: R_TRIG;
	
	// error
	drive_error_event		: FB_EventLog;

	// hall sensor for counting rotation
	counter			AT%I*	: BOOL;
	counter_trig			: R_TRIG;
	
	// reset command to drive
	reset_command			: BOOL;
	reset_timer				: TON;
	reset_drive		AT%Q*	: BOOL;
	
	// moving
	direction_open	AT%Q*	: BOOL;
	direction_close	AT%Q*	: BOOL;

	// move speed
	vel_ramp				: FB_Ramp;
	speed			AT%Q*	: INT;
	target_speed			: INT;		
	limit_speed				: REAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// signals
error := NOT motor_error;

// reset?
//reset_timer();
IF reset_command THEN
	// set signal and start timer
	reset_drive := TRUE;
	reset_timer(IN := TRUE, PT := T#200MS);
END_IF
IF reset_timer.Q THEN
	// reset everything
	reset_drive := FALSE;
	reset_command := FALSE;
	reset_timer(IN := FALSE);
END_IF

// ramp for roof velocity
IF slow_open THEN
	real_speed := TO_INT(min_speed);
ELSIF slow_close THEN
	real_speed := -TO_INT(min_speed);
ELSE
	vel_ramp(
		start		:= real_speed,
		target		:= target_speed,
		accel		:= acceleration,
		value		=> real_speed);
END_IF

// get direction
direction_open := real_speed > 0;
direction_close := real_speed < 0;
	
// counter for position
counter_trig(CLK := counter);
IF counter_trig.Q THEN
	IF direction_open THEN
		position := position + 1;
	ELSE
		position := position - 1;
	END_IF
END_IF

// zero?
IF zero_counter THEN
	position := 0;
END_IF

// if in limits, reset position, but only if moving in that direction
(*
closed_trigger(CLK := closed);
IF direction_close AND closed_trigger.Q THEN
	position := min_position;
END_IF
opened_trigger(CLK := opened);
IF direction_open AND opened_trigger.Q THEN
	position := max_position;
END_IF
*)

// relative position
percent_open := 1.0 * (position - min_position) / (max_position - min_position) * 100.0;

// slowdown near limits
IF direction_close AND percent_open < limit_slowdown THEN
	// closing near limit
	IF percent_open <= 0 THEN
		limit_speed := -TO_INT(min_speed);
	ELSE
		limit_speed := -((percent_open / limit_slowdown) * (max_speed - min_speed) + min_speed);
	END_IF
	IF limit_speed > real_speed THEN
		real_speed :=  REAL_TO_INT(MAX(limit_speed, -TO_INT(max_speed)));
	END_IF	
END_IF
IF direction_open AND 100.0 - percent_open < limit_slowdown THEN
	// opening near limit
	IF percent_open >= 100 THEN
		limit_speed := min_speed;
	ELSE
		limit_speed := ((100.0 - percent_open) / limit_slowdown) * (max_speed - min_speed) + min_speed;
	END_IF
	IF limit_speed < real_speed THEN
		real_speed := REAL_TO_INT(MIN(limit_speed, max_speed));
	END_IF	
END_IF
	
// stop on limit switches
IF (direction_close AND roof_limit_closed) OR (direction_open AND roof_limit_open) THEN
	Stop();
END_IF

// absolute speed
speed := ABS(real_speed);

// set moving to zero, if no movement
moving := real_speed <> 0;

// error
drive_error_event(	
	Trigger 		:= error, 
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString 	:= 'Drive %s in error state.', 
	OnMessage 		:= CONCAT(CONCAT(CONCAT('#', UINT_TO_STRING(drive_number)), ' of roof #'), UINT_TO_STRING(roof_number)),
	Comm			:= comm);
	]]></ST>
    </Implementation>
    <Method Name="Close" Id="{40cd4081-a8ac-4d75-aaee-c72d59685ab9}">
      <Declaration><![CDATA[METHOD Close : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT slow_open AND NOT slow_close THEN
	IF NOT closed THEN
		moving := TRUE;
		target_speed := -TO_INT(max_speed);
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Open" Id="{e1a1847d-b8ba-48c6-8250-57df9d3b1f67}">
      <Declaration><![CDATA[METHOD Open : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT slow_open AND NOT slow_close THEN
	IF NOT opened THEN
		moving := TRUE;
		target_speed := TO_INT(max_speed);
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{aa634c66-2ca0-4bfc-8efe-d1b3d9d3132b}">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[reset_command := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SoftStop" Id="{a2916879-d03b-4d3c-a270-5ed857d57bc6}">
      <Declaration><![CDATA[METHOD SoftStop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT slow_open AND NOT slow_close THEN
	target_speed 	:= 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop" Id="{ecb23643-511b-4e32-9b6a-78443c9c1a37}">
      <Declaration><![CDATA[METHOD Stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT slow_open AND NOT slow_close THEN
	moving 			:= FALSE;
	speed  			:= 0;
	real_speed		:= 0;
	target_speed 	:= 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_RoofMotor">
      <LineId Id="544" Count="0" />
      <LineId Id="546" Count="0" />
      <LineId Id="545" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="541" Count="0" />
      <LineId Id="526" Count="1" />
      <LineId Id="535" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="532" Count="1" />
      <LineId Id="536" Count="0" />
      <LineId Id="538" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="543" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="518" Count="1" />
      <LineId Id="521" Count="1" />
      <LineId Id="520" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="523" Count="0" />
      <LineId Id="384" Count="2" />
      <LineId Id="398" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="146" Count="2" />
      <LineId Id="150" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="151" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="550" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="551" Count="2" />
      <LineId Id="159" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="547" Count="0" />
      <LineId Id="173" Count="2" />
      <LineId Id="172" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="160" Count="2" />
      <LineId Id="548" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="433" Count="3" />
      <LineId Id="454" Count="1" />
      <LineId Id="457" Count="1" />
      <LineId Id="456" Count="0" />
      <LineId Id="438" Count="5" />
      <LineId Id="449" Count="1" />
      <LineId Id="452" Count="1" />
      <LineId Id="451" Count="0" />
      <LineId Id="445" Count="2" />
      <LineId Id="31" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="425" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="223" Count="2" />
      <LineId Id="366" Count="1" />
      <LineId Id="365" Count="0" />
      <LineId Id="358" Count="0" />
    </LineIds>
    <LineIds Name="FB_RoofMotor.Close">
      <LineId Id="20" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_RoofMotor.Open">
      <LineId Id="13" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_RoofMotor.Reset">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_RoofMotor.SoftStop">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_RoofMotor.Stop">
      <LineId Id="19" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>