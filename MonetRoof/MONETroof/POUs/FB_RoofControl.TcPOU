<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_RoofControl" Id="{d87693f7-b561-4571-8c76-2cffdf8ef5fe}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_RoofControl IMPLEMENTS I_Roof
VAR_INPUT
	max_speed				: INT;
	acceleration			: UINT;
	min_position			: INT;
	max_position			: INT;		
	max_position_diff		: INT;
	comm					: I_Comm;		
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// commands for automatic roof controls
	open_roofs				: BOOL;
	close_roofs				: BOOL;
	stop_roofs				: BOOL;
	reset_roofs				: BOOL;	
	open_roof				: ARRAY[1..2] OF BOOL;
	close_roof				: ARRAY[1..2] OF BOOL;
	stop_roof				: ARRAY[1..2] OF BOOL;
	reset_roof				: ARRAY[1..2] OF BOOL;
	
	// automatic mode
	automatic		AT%I*	: BOOL;
	
	// UPS failure
	ups_fail		AT%I*	: BOOL;
	
	// roofs
	roofs					: ARRAY[1..2] OF FB_Roof;
	
	// state
	roof_state				: E_RoofState;
	
	// loop variable	
	i, j					: UINT;
	
	// Comm
	CommTimer 				: TON := (PT:=T#5S);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// call roofs
FOR i := 1 TO 2 DO
	// reset
	IF reset_roofs OR reset_roof[i] THEN
		roofs[i].Reset();
	END_IF	

	// automatic or manual mode
	IF automatic THEN
		roofs[i].Automatic(open_roof := open_roofs OR open_roof[i], close_roof := close_roofs OR close_roof[i], stop_roof := stop_roofs OR stop_roof[i]);
	ELSE
		roofs[i].Manual();
	END_IF

	// run 
	roofs[i](		
		roof_number			:= i,
		max_speed 			:= max_speed, 
		acceleration 		:= acceleration, 
		min_position 		:= min_position, 
		max_position 		:= max_position,
		max_position_diff 	:= max_position_diff,
		comm 				:= comm
	);
END_FOR

// set state
IF roofs[1].state = E_RoofState.error OR roofs[2].state = E_RoofState.error THEN
	roof_state := E_RoofState.error;
ELSIF roofs[1].state = E_RoofState.opened AND roofs[2].state = E_RoofState.opened THEN
	roof_state := E_RoofState.opened;
ELSIF roofs[1].state = E_RoofState.closed AND roofs[2].state = E_RoofState.closed THEN
	roof_state := E_RoofState.closed;
ELSIF roofs[1].state = E_RoofState.opening OR roofs[2].state = E_RoofState.opening THEN
	roof_state := E_RoofState.opening;	
ELSIF roofs[1].state = E_RoofState.closing OR roofs[2].state = E_RoofState.closing THEN
	roof_state := E_RoofState.closing;
ELSIF (roofs[1].state = E_RoofState.stopped OR roofs[1].state = E_RoofState.opened OR roofs[1].state = E_RoofState.closed) AND 
      (roofs[2].state = E_RoofState.stopped OR roofs[2].state = E_RoofState.opened OR roofs[2].state = E_RoofState.closed) THEN
	roof_state := E_RoofState.stopped;
ELSE
	roof_state := E_RoofState.error;	
END_IF

//IF comm <> 0 THEN
//	CommTimer(IN:=TRUE);
//	IF CommTimer.Q THEN // publish new payload every second
//		CommTimer(IN:=FALSE);
//		comm.Publish('roof', 'roof', 'Test', '11');
//	END_IF
//END_IF
]]></ST>
    </Implementation>
    <Method Name="Close" Id="{09e5ef83-053e-434a-9daf-0f46715c9ca8}">
      <Declaration><![CDATA[METHOD Close : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[close_roof[1] := TRUE;
close_roof[2] := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Open" Id="{158f37cb-bd12-4fa4-ba18-0d91b517278d}">
      <Declaration><![CDATA[METHOD Open : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[open_roof[1] := TRUE;
open_roof[2] := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{e643a7f5-953f-43e5-b293-e4f6fb37cbd6}">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[reset_roof[1] := TRUE;
reset_roof[2] := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="State" Id="{7611ff11-7d75-4e77-a763-7a45ea36a762}">
      <Declaration><![CDATA[PROPERTY State : E_RoofState]]></Declaration>
      <Get Name="Get" Id="{63bdd3e1-4e74-409f-b6c0-a0531e107c7a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State := roof_state;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Stop" Id="{b18a1fc2-196a-46c9-9a0b-0d399c89b25a}">
      <Declaration><![CDATA[METHOD Stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stop_roof[1] := TRUE;
stop_roof[2] := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_RoofControl">
      <LineId Id="55" Count="1" />
      <LineId Id="316" Count="0" />
      <LineId Id="318" Count="2" />
      <LineId Id="317" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="202" Count="3" />
      <LineId Id="201" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="255" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="58" Count="18" />
      <LineId Id="270" Count="0" />
      <LineId Id="262" Count="3" />
      <LineId Id="9" Count="0" />
      <LineId Id="271" Count="2" />
    </LineIds>
    <LineIds Name="FB_RoofControl.Close">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_RoofControl.Open">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_RoofControl.Reset">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_RoofControl.State.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_RoofControl.Stop">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>